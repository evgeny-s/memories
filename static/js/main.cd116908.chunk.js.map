{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","children","onClick","className","diffMap","rows","columns","App","state","difficulty","cards","openedCards","matchedCards","clickCount","win","this","initGame","fullItems","i","j","push","shuffled","shuffle","forEach","item","value","opened","setState","index","includes","slice","length","openedCardIndex","Fragment","_renderTitle","range","map","key","isFlipped","_isOpened","flipDirection","openCard","bind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd116908.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card({children, onClick}) {\n  return (\n    <div className='col-sm-1'>\n      <div className=\"card\" onClick={onClick}>\n        <div className=\"card-body\">\n          <p className=\"card-text\">{children}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport './App.css';\nimport Bootstrap from 'bootstrap/dist/css/bootstrap.css';\nimport {shuffle, range} from 'lodash';\nimport ReactCardFlip from 'react-card-flip';\nimport Card from './Card';\n\nconst DIFFICULTY_EASY = 'DIFFICULTY_EASY';\nconst DIFFICULTY_MEDIUM = 'DIFFICULTY_MEDIUM';\nconst DIFFICULTY_HARD = 'DIFFICULTY_HARD';\n\nconst diffMap = {\n  [DIFFICULTY_EASY]: {\n    rows: 4,\n    columns: 4,\n  },\n  [DIFFICULTY_MEDIUM]: {\n    rows: 6,\n    columns: 6,\n  },\n  [DIFFICULTY_HARD]: {\n    rows: 10,\n    columns: 10,\n  },\n};\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      difficulty: DIFFICULTY_EASY,\n      cards: [],\n      openedCards: [],\n      matchedCards: [],\n      clickCount: 0,\n      win: false,\n    };\n  }\n\n  componentDidMount() {\n    this.initGame();\n  }\n\n  initGame() {\n    const rows = diffMap[this.state.difficulty].rows;\n    const columns = diffMap[this.state.difficulty].columns;\n\n    let fullItems = [];\n\n    for (let i = 0; i < rows * columns / 2; i++) {\n      for (let j = 0; j < 2; j++) {\n        fullItems.push(i);\n      }\n    }\n\n    const shuffled = shuffle(fullItems);\n    const cards = [];\n\n    shuffled.forEach((item) => {\n      cards.push({\n        value: item,\n        opened: false,\n      });\n    });\n\n    this.setState({\n      cards,\n    });\n  }\n\n  openCard(index) {\n    if (this.state.matchedCards.includes(index)) {\n      return;\n    }\n\n    let cards = this.state.cards.slice();\n    let matchedCards = this.state.matchedCards.slice();\n\n    let openedCards = this.state.openedCards;\n    if (openedCards.length >= 2) {\n      openedCards.forEach((openedCardIndex) => {\n        if (!matchedCards.includes(openedCardIndex)) {\n          cards[openedCardIndex].opened = false;\n        }\n      });\n      openedCards = [];\n    }\n\n    cards[index].opened = !cards[index].opened;\n\n    openedCards.push(index);\n\n    this.setState({\n      cards,\n      openedCards,\n      clickCount: this.state.clickCount + 1,\n    }, () => {\n      let matchedCards = this.state.matchedCards.slice();\n\n      if (\n        this.state.openedCards.length === 2\n        && this.state.cards[this.state.openedCards[0]].value === this.state.cards[this.state.openedCards[1]].value\n      ) {\n        matchedCards.push(this.state.openedCards[0]);\n        matchedCards.push(this.state.openedCards[1]);\n\n        let win = false;\n        if (matchedCards.length === this.state.cards.length) {\n          win = true;\n        }\n\n        this.setState({\n          matchedCards,\n          win,\n        });\n      }\n    });\n  }\n\n  _isOpened(item) {\n    return item.opened || this.state.matchedCards.includes(item);\n  }\n\n  _renderTitle() {\n    return (\n      <React.Fragment>\n        <h1>Memories game</h1>\n        <h3>Clicked times: {this.state.clickCount}</h3>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    if (this.state.win) {\n      return <h1>Congrats!!!</h1>\n    }\n\n    if (!this.state.cards.length) {\n      return null;\n    }\n\n    return (\n      <div className=\"App\">\n        {this._renderTitle()}\n        <div className={'container'}>\n          {\n            range(diffMap[this.state.difficulty].rows).map((i) => (\n              <div className='row'>\n                {\n                  range(diffMap[this.state.difficulty].columns).map((j) => {\n                    const index = diffMap[this.state.difficulty].columns * i + j;\n                    const item = this.state.cards[index];\n\n                    return (\n                      <div className='grid-item'>\n                        <ReactCardFlip key={index} isFlipped={this._isOpened(item)} flipDirection=\"horizontal\">\n                          <Card key={index} onClick={this.openCard.bind(this, index)}>\n                            closed!\n                          </Card>\n                          <Card key={index} onClick={this.openCard.bind(this, index)}>\n                            {item.value}\n                          </Card>\n                        </ReactCardFlip>\n                      </div>\n                    );\n                  })\n                }\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}